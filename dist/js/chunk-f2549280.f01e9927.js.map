{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.split.js","webpack:///./src/views/Tx.vue?6a2e","webpack:///./src/views/Tx.vue?6fdb","webpack:///./src/views/Tx.vue","webpack:///./node_modules/core-js/modules/_is-regexp.js","webpack:///src/views/Tx.vue"],"names":["isRegExp","__webpack_require__","anObject","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","$min","Math","min","$push","push","$SPLIT","LENGTH","LAST_INDEX","MAX_UINT32","SUPPORTS_Y","RegExp","defined","SPLIT","$split","maybeCallNative","internalSplit","separator","limit","string","String","this","undefined","call","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","splitLimit","separatorCopy","source","slice","index","apply","test","O","splitter","regexp","res","done","value","rx","S","C","unicodeMatching","lim","length","p","q","A","e","z","i","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","$route","params","txHash","txObject","attrs","id","md-label","decodedTx","title","clean","readonly","model","callback","$$v","$set","expression","_e","payload","staticStyle","margin-bottom","domProps","innerHTML","errorObject","md-icon","staticRenderFns","views_Txvue_type_script_lang_js_","Txvue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","isObject","cof","MATCH","module","exports","it","name","data","hex","type","created","fetchTx","methods","pretty","JSON","stringify","txId","datapay","connect","requestGet","error","body","console","log","parsedBody","parse","statusCode","load","vout","scriptPubKey","asm","split","Buffer","toString"],"mappings":"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","file":"js/chunk-f2549280.f01e9927.js","sourcesContent":["'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tx\"},[_c('h3',[_vm._v(\"Transaction: \"+_vm._s(_vm.$route.params.txHash))]),_c('div',[(_vm.txObject[0])?_c('md-tabs',[_c('md-tab',{attrs:{\"id\":\"tab-details\",\"md-label\":\"Details\"}},[(_vm.decodedTx.title.clean)?_c('md-content',[_c('h3',[_vm._v(\"Title:\")]),_c('p',[_vm._v(_vm._s(_vm.decodedTx.title.clean))]),_c('md-field',[_c('label',[_vm._v(\"hex:\")]),_c('md-input',{attrs:{\"readonly\":\"\"},model:{value:(_vm.decodedTx.title.hex),callback:function ($$v) {_vm.$set(_vm.decodedTx.title, \"hex\", $$v)},expression:\"decodedTx.title.hex\"}})],1)],1):_vm._e(),(_vm.decodedTx.payload.clean)?_c('md-content',[_c('h3',[_vm._v(\"Payload:\")]),_c('md-field',[_c('md-textarea',{attrs:{\"readonly\":\"\"},model:{value:(_vm.decodedTx.payload.clean),callback:function ($$v) {_vm.$set(_vm.decodedTx.payload, \"clean\", $$v)},expression:\"decodedTx.payload.clean\"}})],1),_c('md-divider',{staticStyle:{\"margin-bottom\":\"15px\"}}),_c('md-field',[_c('label',[_vm._v(\"hex:\")]),_c('md-textarea',{attrs:{\"readonly\":\"\"},model:{value:(_vm.decodedTx.payload.hex),callback:function ($$v) {_vm.$set(_vm.decodedTx.payload, \"hex\", $$v)},expression:\"decodedTx.payload.hex\"}})],1),_c('md-divider',{staticStyle:{\"margin-bottom\":\"15px\"}}),_c('h3',[_vm._v(\"Rendered OP_RETURN:\")]),_c('div',[_c('div',[_vm._v(_vm._s(_vm.decodedTx.payload.clean))])])],1):_vm._e()],1),_c('md-tab',{attrs:{\"id\":\"tab-raw-tx\",\"md-label\":\"Raw Tx\"}},[_c('md-field',[_c('pre',[_c('code',{staticClass:\"plaintext\",domProps:{\"innerHTML\":_vm._s(_vm.txObject[0])}})])])],1)],1):_vm._e(),(_vm.errorObject[0])?_c('md-empty-state',{attrs:{\"md-icon\":\"transform\",\"md-label\":\"Failed to load transaction!\"}}):_vm._e()],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tx.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tx.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tx.vue?vue&type=template&id=39fa5e92&\"\nimport script from \"./Tx.vue?vue&type=script&lang=js&\"\nexport * from \"./Tx.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","<template>\n  <div class=\"tx\">\n    <h3>Transaction: {{ $route.params.txHash }}</h3>\n\n    <div>\n      <md-tabs v-if=\"txObject[0]\">\n        <md-tab id=\"tab-details\" md-label=\"Details\">\n          <md-content v-if=\"decodedTx.title.clean\">\n            <h3>Title:</h3>\n            <p>{{decodedTx.title.clean}}</p>\n            <md-field>\n              <label>hex:</label>\n              <md-input readonly v-model=\"decodedTx.title.hex\"></md-input>\n            </md-field>\n          </md-content>\n\n\n          <md-content v-if=\"decodedTx.payload.clean\">\n            <h3>Payload:</h3>\n            <md-field>\n              <md-textarea readonly v-model=\"decodedTx.payload.clean\"></md-textarea>\n            </md-field>\n\n            <md-divider style=\"margin-bottom: 15px;\"></md-divider>\n\n            <md-field>\n              <label>hex:</label>\n              <md-textarea readonly v-model=\"decodedTx.payload.hex\"></md-textarea>\n            </md-field>\n\n            <md-divider style=\"margin-bottom: 15px;\"></md-divider>\n\n            <h3>Rendered OP_RETURN:</h3>\n            <div>\n              <div>{{decodedTx.payload.clean}}</div>\n            </div>\n          </md-content>\n        </md-tab>\n\n        <md-tab id=\"tab-raw-tx\" md-label=\"Raw Tx\">\n          <md-field>\n            <pre><code v-html=\"txObject[0]\" class=\"plaintext\"></code></pre>\n          </md-field>\n        </md-tab>\n      </md-tabs>\n\n      <md-empty-state v-if=\"errorObject[0]\"\n        md-icon=\"transform\"\n        md-label=\"Failed to load transaction!\">\n        <!-- <md-button class=\"md-primary md-raised\">Create first project</md-button> -->\n      </md-empty-state>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'tx',\n    data: function() {\n      return {\n        errorObject: [],\n        txObject: [],\n        decodedTx: {\n          title: {\n            hex: null,\n            clean: null\n          },\n          payload: {\n            hex: null,\n            clean: null\n          },\n          type: \"default\"\n        }\n      }\n    },\n    created: function () {\n      this.fetchTx()\n    },\n    methods: {\n      pretty: function() {\n        return JSON.stringify(txObject[0], undefined, 2);\n      },\n      fetchTx: function() {\n        let txId = this.$route.params.txHash\n        let txObject = this.txObject\n        let errorObject = this.errorObject\n        let decodedTx = this.decodedTx\n\n        datapay.connect().requestGet('/api/v3/main/tx/'+txId, function(error, res, body) { \n          if (error) {\n            console.log('Error:' + error)\n            errorObject.push(error)\n          } else {\n            let parsedBody = JSON.parse(body)\n\n            if (res.statusCode == 200) {\n              txObject.push(parsedBody)\n\n              let load = parsedBody.vout[0].scriptPubKey.asm.split(\" \")\n              if (load.length == 3) {\n                decodedTx.title.hex = load[1]\n                decodedTx.title.clean = new Buffer(load[1], 'hex').toString()\n\n                decodedTx.payload.hex = load[2]\n                decodedTx.payload.clean = new Buffer(load[2], 'hex').toString()\n              }\n\n              if (load.length == 2) {\n                decodedTx.payload.hex = load[1]\n                decodedTx.payload.clean = new Buffer(load[1], 'hex').toString()\n              }\n\n              // if (decodedTx.payload.clean.includes('blockquote class=\"twitter-tweet\"')) {\n              // }\n            } else {\n              errorObject.push(parsedBody)\n            }\n          }\n        })\n      }\n    }\n  }\n</script>\n"],"sourceRoot":""}